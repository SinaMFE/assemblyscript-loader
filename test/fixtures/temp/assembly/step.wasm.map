{"version":3,"sources":["test/fixtures/step.ts"],"names":[],"mappings":"uGAQE,AAAI,IACJ,AAAI,IACJ,AAAI,EAAI,WAKE,EAAI,KACJ,EAAI,OACd,EAAqB,EAAI,KACb,AAAiB,EAAI,GAAT,EAAY,KACxB,AAAY,EAAG,EAAI,GAAG,EAAK,MAChC,AAAa,MAAlB,EAAqB,EAAI,KAGvB,AAAQ,AAG4C,AAAS,AAJnD,AAAY,EAAG,EAAI,GAAG,EAAK,MAIwB,EAAM,OAFjE,AAE0B,AAAS,EAAM,GAAI,MAF7C,AAEA,AAAS,AALD,AAAiB,EAAI,GAAT,EAAY,KAKvB,EAAM,OAFf,AACkD,AAAS,EAAM,GAAI,MADrE,AACA,AAAS,EAAM,GAAI,MADnB,AAAkD,AAAS,EAAM,GAAI,MAArE,AAAS,EAAM,GAAI,MAAO,AAAS,EAAM,GAAI,eAI/C,AAAI,AAAS,EAAI,GAAI,QAAI,AACnB,EAAI,UAAK,EAAI,MACf,AAAU,EAAI,EAAI,IAAI,GAAG,OACtB,AAAI,EAAK,KACd,AAAU,EAAI,EAAI,IAAI,GAAG,OAZD,AAAE,WAHJ,AAAE","sourceRoot":"assemblyscript:///","sourceContents":["// A simplified version of the game of life as seen on http://dcode.io\n\nvar w: u32, // width\n    h: u32, // height\n    s: u32; // total size\n\n/** Initializes width and height. */\nexport function init(w_: u32, h_: u32): void {\n  w = w_;\n  h = h_;\n  s = w * h;\n}\n\n/** Performs one step. */\nexport function step(): void {\n  var hm1 = h - 1,\n      wm1 = w - 1;\n  for (var y: u32 = 0; y < h; ++y) {\n    var ym1 = select<u32>(hm1, y - 1, y == 0),\n        yp1 = select<u32>(0, y + 1, y == hm1);\n    for (var x: u32 = 0; x < w; ++x) {\n      var xm1 = select<u32>(wm1, x - 1, x == 0),\n          xp1 = select<u32>(0, x + 1, x == wm1);\n      var n = (\n        load<u8>(ym1 * w + xm1) + load<u8>(ym1 * w + x) + load<u8>(ym1 * w + xp1) +\n        load<u8>(y   * w + xm1)                         + load<u8>(y   * w + xp1) +\n        load<u8>(yp1 * w + xm1) + load<u8>(yp1 * w + x) + load<u8>(yp1 * w + xp1)\n      );\n      if (load<u8>(y * w + x)) {\n        if (n < 2 || n > 3)\n          store<u8>(s + y * w + x, 0);\n      } else if (n == 3)\n        store<u8>(s + y * w + x, 1);\n    }\n  }\n}\n\n// Performing a step uses bytes [0, s-1] as the input and writes the output to [s, 2*s-1].\n// Note that the code above wastes a lot of space by using one byte per cell.\n"]}